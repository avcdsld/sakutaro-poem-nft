{
  "address": "0xA87AbF6854207075e65D16cF86a8ece1216eA973",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenURIContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxElements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "modulo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondarySaleRoyalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenURIContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x133faf6001b42cdf00277a15f8d16938cd140b71bc72579800810d604d8f94c6",
  "receipt": {
    "to": null,
    "from": "0x1Ab4264485188933DB0D9BCb34fAce34d54459bE",
    "contractAddress": "0xA87AbF6854207075e65D16cF86a8ece1216eA973",
    "transactionIndex": 91,
    "gasUsed": "103978361",
    "logsBloom": "0xb8f320811715d45d03cb385aa4d630a2378cb176b7e1c10a05926142c8317b59c3f6fe49c084672b88740e8b243a893f3d454c342ecbfb443b9284402cf48a918b0f14020109331f705afa3e819478289269a9b98ae412858d6734df89317932784416e5fb15db4a89e808ef5921cd7f6527a402148c05c115f16fb8e238c6cb57b1a3bd95790b422b2c24960e83128b93d94bc338c3e0bf5d4cd5f141f25bbfc2460ce52e2c0cac92da235901476c835a28c49a412e9e34eb3e29f1064eec5061488c42547c8ea1b6ac2063c7b6644a3240129aaf19421f952b1622c971a8c4a2795f19dca828c9079c80b0e27740b8a077d04147b82256ca461e3cbf21e0c2",
    "blockHash": "0xd913b41bc6bd736693089bf90c4e833cbd96f0109fd094669245a67fee87b309",
    "transactionHash": "0x133faf6001b42cdf00277a15f8d16938cd140b71bc72579800810d604d8f94c6",
    "logs": [],
    "blockNumber": 3967515,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x22C42c406046446EAd59388877Aa710b87962974"
  ],
  "numDeployments": 1,
  "solcInputHash": "9d362a9261eac5217bad10d772735e46",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenURIContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxElements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modulo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondarySaleRoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURIContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SakutaroPoem.sol\":\"SakutaroPoem\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      ERC721 BALANCE/OWNER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) internal _ownerOf;\\n\\n    mapping(address => uint256) internal _balanceOf;\\n\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\n        require((owner = _ownerOf[id]) != address(0), \\\"NOT_MINTED\\\");\\n    }\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        return _balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 APPROVAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == _ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            _balanceOf[from]--;\\n\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(_ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(owner != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            _balanceOf[owner]--;\\n        }\\n\\n        delete _ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721TokenReceiver {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xb59c7c25eca386f39da4819a9f70f89b73b7583d5f5127a83ffe5339800b1183\",\"license\":\"AGPL-3.0-only\"},\"contracts/SakutaroPoem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//  _____         _            _\\n// /  ___|       | |          | |\\n// \\\\ `--.   __ _ | | __ _   _ | |_   __ _  _ __   ___\\n//  `--. \\\\ / _` || |/ /| | | || __| / _` || '__| / _ \\\\\\n// /\\\\__/ /| (_| ||   < | |_| || |_ | (_| || |   | (_) |\\n// \\\\____/  \\\\__,_||_|\\\\_\\\\ \\\\__,_| \\\\__| \\\\__,_||_|    \\\\___/\\n//\\npragma solidity ^0.8.2;\\n\\nimport {ERC721} from \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ninterface ITokenURI {\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\ncontract SakutaroPoem is ERC721 {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIdCounter;\\n\\n    uint256 public constant maxElements = 39;\\n    uint256 public constant secondarySaleRoyalty = 10_00000; // 10.0%\\n    uint256 public constant modulo = 100_00000; // precision 100.00000%\\n\\n    address public tokenURIContractAddress;\\n    address public royaltyReceiver;\\n    uint256 private seed;\\n\\n    constructor(address _tokenURIContractAddress) ERC721(\\\"Sakutaro Poem\\\", \\\"SAKU\\\") {\\n        tokenURIContractAddress = _tokenURIContractAddress;\\n        royaltyReceiver = msg.sender;\\n        seed = block.timestamp;\\n    }\\n\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _tokenIdCounter.current();\\n    }\\n\\n    function mint(address to) public {\\n        require(_tokenIdCounter.current() < maxElements, \\\"Mint would exceed max supply of NFTs\\\");\\n        _tokenIdCounter.increment();\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _safeMint(to, tokenId);\\n    }\\n\\n    function _burn(uint256 tokenId) internal override(ERC721) {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override(ERC721) returns (string memory) {\\n        uint256 id = (uint160(ownerOf(tokenId)) + seed) % uint256(39);\\n        return ITokenURI(tokenURIContractAddress).tokenURI(id);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public pure virtual override(ERC721) returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f || // ERC165 Interface ID for ERC721Metadata\\n            interfaceId == 0x2a55205a; // ERC165 Interface ID for ERC2981\\n    }\\n\\n    // ERC-2981\\n    function royaltyInfo(\\n        uint256 /* _tokenId */,\\n        uint256 _value\\n    ) external view returns (address _receiver, uint256 _royaltyAmount) {\\n        _receiver = royaltyReceiver;\\n        _royaltyAmount = (_value / modulo) * secondarySaleRoyalty;\\n    }\\n}\\n\",\"keccak256\":\"0x27a5e247e6135f53435146691e89b3aeaefb6aa2029e1c67d7ae2fb7839d93d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620027423803806200274283398181016040528101906200003791906200022e565b6040518060400160405280600d81526020017f53616b757461726f20506f656d000000000000000000000000000000000000008152506040518060400160405280600481526020017f53414b55000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bb92919062000167565b508060019080519060200190620000d492919062000167565b50505080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600981905550506200030d565b82805462000175906200028e565b90600052602060002090601f016020900481019282620001995760008555620001e5565b82601f10620001b457805160ff1916838001178555620001e5565b82800160010185558215620001e5579182015b82811115620001e4578251825591602001919060010190620001c7565b5b509050620001f49190620001f8565b5090565b5b8082111562000213576000816000905550600101620001f9565b5090565b6000815190506200022881620002f3565b92915050565b6000602082840312156200024157600080fd5b6000620002518482850162000217565b91505092915050565b600062000267826200026e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006002820490506001821680620002a757607f821691505b60208210811415620002be57620002bd620002c4565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b620002fe816200025a565b81146200030a57600080fd5b50565b612425806200031d6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80636352211e116100b85780639fbc87131161007c5780639fbc871314610351578063a22cb4651461036f578063b88d4fde1461038b578063c87b56dd146103a7578063d9cc1886146103d7578063e985e9c5146103f557610137565b80636352211e1461029957806363f204d0146102c95780636a627842146102e757806370a082311461030357806395d89b411461033357610137565b806323b872dd116100ff57806323b872dd146101f457806329745262146102105780632a55205a1461022e57806342842e0e1461025f578063558fa0f51461027b57610137565b806301ffc9a71461013c57806306fdde031461016c578063081812fc1461018a578063095ea7b3146101ba57806318160ddd146101d6575b600080fd5b610156600480360381019061015191906119ad565b610425565b6040516101639190611d4f565b60405180910390f35b6101746104e7565b6040516101819190611d6a565b60405180910390f35b6101a4600480360381019061019f9190611a40565b610575565b6040516101b19190611c73565b60405180910390f35b6101d460048036038101906101cf9190611971565b6105a8565b005b6101de610791565b6040516101eb9190611e8c565b60405180910390f35b61020e60048036038101906102099190611866565b6107a2565b005b610218610ba2565b6040516102259190611e8c565b60405180910390f35b61024860048036038101906102439190611a69565b610ba9565b604051610256929190611d26565b60405180910390f35b61027960048036038101906102749190611866565b610bf7565b005b610283610d3e565b6040516102909190611e8c565b60405180910390f35b6102b360048036038101906102ae9190611a40565b610d43565b6040516102c09190611c73565b60405180910390f35b6102d1610def565b6040516102de9190611e8c565b60405180910390f35b61030160048036038101906102fc9190611801565b610df6565b005b61031d60048036038101906103189190611801565b610e68565b60405161032a9190611e8c565b60405180910390f35b61033b610f20565b6040516103489190611d6a565b60405180910390f35b610359610fae565b6040516103669190611c73565b60405180910390f35b61038960048036038101906103849190611935565b610fd4565b005b6103a560048036038101906103a091906118b5565b6110d1565b005b6103c160048036038101906103bc9190611a40565b61121e565b6040516103ce9190611d6a565b60405180910390f35b6103df611314565b6040516103ec9190611c73565b60405180910390f35b61040f600480360381019061040a919061182a565b61133a565b60405161041c9190611d4f565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061048057506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104b05750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104e05750632a55205a60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600080546104f4906120c1565b80601f0160208091040260200160405190810160405280929190818152602001828054610520906120c1565b801561056d5780601f106105425761010080835404028352916020019161056d565b820191906000526020600020905b81548152906001019060200180831161055057829003601f168201915b505050505081565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806106a05750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d690611e2c565b60405180910390fd5b826004600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b600061079d6006611369565b905090565b6002600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083a90611e6c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108aa90611d8c565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109735750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b806109dc57506004600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1290611e2c565b60405180910390fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6298968081565b600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150620f42406298968084610be49190611f80565b610bee9190611fb1565b90509250929050565b610c028383836107a2565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480610cfa575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b8152600401610c8793929190611cdc565b602060405180830381600087803b158015610ca157600080fd5b505af1158015610cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd991906119d6565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b610d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3090611dec565b60405180910390fd5b505050565b602781565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff161415610dea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de190611e4c565b60405180910390fd5b919050565b620f424081565b6027610e026006611369565b10610e42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3990611dac565b60405180910390fd5b610e4c6006611377565b6000610e586006611369565b9050610e64828261138d565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ed9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed090611dcc565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60018054610f2d906120c1565b80601f0160208091040260200160405190810160405280929190818152602001828054610f59906120c1565b8015610fa65780601f10610f7b57610100808354040283529160200191610fa6565b820191906000526020600020905b815481529060010190602001808311610f8957829003601f168201915b505050505081565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516110c59190611d4f565b60405180910390a35050565b6110dc8585856107a2565b60008473ffffffffffffffffffffffffffffffffffffffff163b14806111d8575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663150b7a0233888787876040518663ffffffff1660e01b8152600401611165959493929190611c8e565b602060405180830381600087803b15801561117f57600080fd5b505af1158015611193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b791906119d6565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611217576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120e90611dec565b60405180910390fd5b5050505050565b60606000602760095461123085610d43565b73ffffffffffffffffffffffffffffffffffffffff166112509190611f2a565b61125a9190612124565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c87b56dd826040518263ffffffff1660e01b81526004016112b79190611e8c565b60006040518083038186803b1580156112cf57600080fd5b505afa1580156112e3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061130c91906119ff565b915050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60056020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600081600001549050919050565b6001816000016000828254019250508190555050565b61139782826114d3565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480611490575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a02336000856040518463ffffffff1660e01b815260040161141d93929190611cdc565b602060405180830381600087803b15801561143757600080fd5b505af115801561144b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146f91906119d6565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b6114cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c690611dec565b60405180910390fd5b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153a90611d8c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115dc90611e0c565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60006116f96116f484611ecc565b611ea7565b90508281526020810184848401111561171157600080fd5b61171c84828561208e565b509392505050565b60008135905061173381612393565b92915050565b600081359050611748816123aa565b92915050565b60008135905061175d816123c1565b92915050565b600081519050611772816123c1565b92915050565b60008083601f84011261178a57600080fd5b8235905067ffffffffffffffff8111156117a357600080fd5b6020830191508360018202830111156117bb57600080fd5b9250929050565b600082601f8301126117d357600080fd5b81516117e38482602086016116e6565b91505092915050565b6000813590506117fb816123d8565b92915050565b60006020828403121561181357600080fd5b600061182184828501611724565b91505092915050565b6000806040838503121561183d57600080fd5b600061184b85828601611724565b925050602061185c85828601611724565b9150509250929050565b60008060006060848603121561187b57600080fd5b600061188986828701611724565b935050602061189a86828701611724565b92505060406118ab868287016117ec565b9150509250925092565b6000806000806000608086880312156118cd57600080fd5b60006118db88828901611724565b95505060206118ec88828901611724565b94505060406118fd888289016117ec565b935050606086013567ffffffffffffffff81111561191a57600080fd5b61192688828901611778565b92509250509295509295909350565b6000806040838503121561194857600080fd5b600061195685828601611724565b925050602061196785828601611739565b9150509250929050565b6000806040838503121561198457600080fd5b600061199285828601611724565b92505060206119a3858286016117ec565b9150509250929050565b6000602082840312156119bf57600080fd5b60006119cd8482850161174e565b91505092915050565b6000602082840312156119e857600080fd5b60006119f684828501611763565b91505092915050565b600060208284031215611a1157600080fd5b600082015167ffffffffffffffff811115611a2b57600080fd5b611a37848285016117c2565b91505092915050565b600060208284031215611a5257600080fd5b6000611a60848285016117ec565b91505092915050565b60008060408385031215611a7c57600080fd5b6000611a8a858286016117ec565b9250506020611a9b858286016117ec565b9150509250929050565b611aae8161200b565b82525050565b611abd8161201d565b82525050565b6000611acf8385611f08565b9350611adc83858461207f565b611ae583612211565b840190509392505050565b6000611afb82611efd565b611b058185611f19565b9350611b1581856020860161208e565b611b1e81612211565b840191505092915050565b6000611b36601183611f19565b9150611b4182612222565b602082019050919050565b6000611b59602483611f19565b9150611b648261224b565b604082019050919050565b6000611b7c600c83611f19565b9150611b878261229a565b602082019050919050565b6000611b9f601083611f19565b9150611baa826122c3565b602082019050919050565b6000611bc2600083611f08565b9150611bcd826122ec565b600082019050919050565b6000611be5600e83611f19565b9150611bf0826122ef565b602082019050919050565b6000611c08600e83611f19565b9150611c1382612318565b602082019050919050565b6000611c2b600a83611f19565b9150611c3682612341565b602082019050919050565b6000611c4e600a83611f19565b9150611c598261236a565b602082019050919050565b611c6d81612075565b82525050565b6000602082019050611c886000830184611aa5565b92915050565b6000608082019050611ca36000830188611aa5565b611cb06020830187611aa5565b611cbd6040830186611c64565b8181036060830152611cd0818486611ac3565b90509695505050505050565b6000608082019050611cf16000830186611aa5565b611cfe6020830185611aa5565b611d0b6040830184611c64565b8181036060830152611d1c81611bb5565b9050949350505050565b6000604082019050611d3b6000830185611aa5565b611d486020830184611c64565b9392505050565b6000602082019050611d646000830184611ab4565b92915050565b60006020820190508181036000830152611d848184611af0565b905092915050565b60006020820190508181036000830152611da581611b29565b9050919050565b60006020820190508181036000830152611dc581611b4c565b9050919050565b60006020820190508181036000830152611de581611b6f565b9050919050565b60006020820190508181036000830152611e0581611b92565b9050919050565b60006020820190508181036000830152611e2581611bd8565b9050919050565b60006020820190508181036000830152611e4581611bfb565b9050919050565b60006020820190508181036000830152611e6581611c1e565b9050919050565b60006020820190508181036000830152611e8581611c41565b9050919050565b6000602082019050611ea16000830184611c64565b92915050565b6000611eb1611ec2565b9050611ebd82826120f3565b919050565b6000604051905090565b600067ffffffffffffffff821115611ee757611ee66121e2565b5b611ef082612211565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611f3582612075565b9150611f4083612075565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611f7557611f74612155565b5b828201905092915050565b6000611f8b82612075565b9150611f9683612075565b925082611fa657611fa5612184565b5b828204905092915050565b6000611fbc82612075565b9150611fc783612075565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561200057611fff612155565b5b828202905092915050565b600061201682612055565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156120ac578082015181840152602081019050612091565b838111156120bb576000848401525b50505050565b600060028204905060018216806120d957607f821691505b602082108114156120ed576120ec6121b3565b5b50919050565b6120fc82612211565b810181811067ffffffffffffffff8211171561211b5761211a6121e2565b5b80604052505050565b600061212f82612075565b915061213a83612075565b92508261214a57612149612184565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b7f4d696e7420776f756c6420657863656564206d617820737570706c79206f662060008201527f4e46547300000000000000000000000000000000000000000000000000000000602082015250565b7f5a45524f5f414444524553530000000000000000000000000000000000000000600082015250565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b50565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b7f4e4f545f4d494e54454400000000000000000000000000000000000000000000600082015250565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b61239c8161200b565b81146123a757600080fd5b50565b6123b38161201d565b81146123be57600080fd5b50565b6123ca81612029565b81146123d557600080fd5b50565b6123e181612075565b81146123ec57600080fd5b5056fea2646970667358221220c0a55333192370778c2c0e5ad175b095a2229989edeaa2cd1474aa8ea526793a64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80636352211e116100b85780639fbc87131161007c5780639fbc871314610351578063a22cb4651461036f578063b88d4fde1461038b578063c87b56dd146103a7578063d9cc1886146103d7578063e985e9c5146103f557610137565b80636352211e1461029957806363f204d0146102c95780636a627842146102e757806370a082311461030357806395d89b411461033357610137565b806323b872dd116100ff57806323b872dd146101f457806329745262146102105780632a55205a1461022e57806342842e0e1461025f578063558fa0f51461027b57610137565b806301ffc9a71461013c57806306fdde031461016c578063081812fc1461018a578063095ea7b3146101ba57806318160ddd146101d6575b600080fd5b610156600480360381019061015191906119ad565b610425565b6040516101639190611d4f565b60405180910390f35b6101746104e7565b6040516101819190611d6a565b60405180910390f35b6101a4600480360381019061019f9190611a40565b610575565b6040516101b19190611c73565b60405180910390f35b6101d460048036038101906101cf9190611971565b6105a8565b005b6101de610791565b6040516101eb9190611e8c565b60405180910390f35b61020e60048036038101906102099190611866565b6107a2565b005b610218610ba2565b6040516102259190611e8c565b60405180910390f35b61024860048036038101906102439190611a69565b610ba9565b604051610256929190611d26565b60405180910390f35b61027960048036038101906102749190611866565b610bf7565b005b610283610d3e565b6040516102909190611e8c565b60405180910390f35b6102b360048036038101906102ae9190611a40565b610d43565b6040516102c09190611c73565b60405180910390f35b6102d1610def565b6040516102de9190611e8c565b60405180910390f35b61030160048036038101906102fc9190611801565b610df6565b005b61031d60048036038101906103189190611801565b610e68565b60405161032a9190611e8c565b60405180910390f35b61033b610f20565b6040516103489190611d6a565b60405180910390f35b610359610fae565b6040516103669190611c73565b60405180910390f35b61038960048036038101906103849190611935565b610fd4565b005b6103a560048036038101906103a091906118b5565b6110d1565b005b6103c160048036038101906103bc9190611a40565b61121e565b6040516103ce9190611d6a565b60405180910390f35b6103df611314565b6040516103ec9190611c73565b60405180910390f35b61040f600480360381019061040a919061182a565b61133a565b60405161041c9190611d4f565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061048057506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104b05750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104e05750632a55205a60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600080546104f4906120c1565b80601f0160208091040260200160405190810160405280929190818152602001828054610520906120c1565b801561056d5780601f106105425761010080835404028352916020019161056d565b820191906000526020600020905b81548152906001019060200180831161055057829003601f168201915b505050505081565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806106a05750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d690611e2c565b60405180910390fd5b826004600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b600061079d6006611369565b905090565b6002600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083a90611e6c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108aa90611d8c565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109735750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b806109dc57506004600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1290611e2c565b60405180910390fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6298968081565b600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150620f42406298968084610be49190611f80565b610bee9190611fb1565b90509250929050565b610c028383836107a2565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480610cfa575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b8152600401610c8793929190611cdc565b602060405180830381600087803b158015610ca157600080fd5b505af1158015610cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd991906119d6565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b610d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3090611dec565b60405180910390fd5b505050565b602781565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff161415610dea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de190611e4c565b60405180910390fd5b919050565b620f424081565b6027610e026006611369565b10610e42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3990611dac565b60405180910390fd5b610e4c6006611377565b6000610e586006611369565b9050610e64828261138d565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ed9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed090611dcc565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60018054610f2d906120c1565b80601f0160208091040260200160405190810160405280929190818152602001828054610f59906120c1565b8015610fa65780601f10610f7b57610100808354040283529160200191610fa6565b820191906000526020600020905b815481529060010190602001808311610f8957829003601f168201915b505050505081565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516110c59190611d4f565b60405180910390a35050565b6110dc8585856107a2565b60008473ffffffffffffffffffffffffffffffffffffffff163b14806111d8575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663150b7a0233888787876040518663ffffffff1660e01b8152600401611165959493929190611c8e565b602060405180830381600087803b15801561117f57600080fd5b505af1158015611193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b791906119d6565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611217576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120e90611dec565b60405180910390fd5b5050505050565b60606000602760095461123085610d43565b73ffffffffffffffffffffffffffffffffffffffff166112509190611f2a565b61125a9190612124565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c87b56dd826040518263ffffffff1660e01b81526004016112b79190611e8c565b60006040518083038186803b1580156112cf57600080fd5b505afa1580156112e3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061130c91906119ff565b915050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60056020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600081600001549050919050565b6001816000016000828254019250508190555050565b61139782826114d3565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480611490575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a02336000856040518463ffffffff1660e01b815260040161141d93929190611cdc565b602060405180830381600087803b15801561143757600080fd5b505af115801561144b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146f91906119d6565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b6114cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c690611dec565b60405180910390fd5b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153a90611d8c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115dc90611e0c565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60006116f96116f484611ecc565b611ea7565b90508281526020810184848401111561171157600080fd5b61171c84828561208e565b509392505050565b60008135905061173381612393565b92915050565b600081359050611748816123aa565b92915050565b60008135905061175d816123c1565b92915050565b600081519050611772816123c1565b92915050565b60008083601f84011261178a57600080fd5b8235905067ffffffffffffffff8111156117a357600080fd5b6020830191508360018202830111156117bb57600080fd5b9250929050565b600082601f8301126117d357600080fd5b81516117e38482602086016116e6565b91505092915050565b6000813590506117fb816123d8565b92915050565b60006020828403121561181357600080fd5b600061182184828501611724565b91505092915050565b6000806040838503121561183d57600080fd5b600061184b85828601611724565b925050602061185c85828601611724565b9150509250929050565b60008060006060848603121561187b57600080fd5b600061188986828701611724565b935050602061189a86828701611724565b92505060406118ab868287016117ec565b9150509250925092565b6000806000806000608086880312156118cd57600080fd5b60006118db88828901611724565b95505060206118ec88828901611724565b94505060406118fd888289016117ec565b935050606086013567ffffffffffffffff81111561191a57600080fd5b61192688828901611778565b92509250509295509295909350565b6000806040838503121561194857600080fd5b600061195685828601611724565b925050602061196785828601611739565b9150509250929050565b6000806040838503121561198457600080fd5b600061199285828601611724565b92505060206119a3858286016117ec565b9150509250929050565b6000602082840312156119bf57600080fd5b60006119cd8482850161174e565b91505092915050565b6000602082840312156119e857600080fd5b60006119f684828501611763565b91505092915050565b600060208284031215611a1157600080fd5b600082015167ffffffffffffffff811115611a2b57600080fd5b611a37848285016117c2565b91505092915050565b600060208284031215611a5257600080fd5b6000611a60848285016117ec565b91505092915050565b60008060408385031215611a7c57600080fd5b6000611a8a858286016117ec565b9250506020611a9b858286016117ec565b9150509250929050565b611aae8161200b565b82525050565b611abd8161201d565b82525050565b6000611acf8385611f08565b9350611adc83858461207f565b611ae583612211565b840190509392505050565b6000611afb82611efd565b611b058185611f19565b9350611b1581856020860161208e565b611b1e81612211565b840191505092915050565b6000611b36601183611f19565b9150611b4182612222565b602082019050919050565b6000611b59602483611f19565b9150611b648261224b565b604082019050919050565b6000611b7c600c83611f19565b9150611b878261229a565b602082019050919050565b6000611b9f601083611f19565b9150611baa826122c3565b602082019050919050565b6000611bc2600083611f08565b9150611bcd826122ec565b600082019050919050565b6000611be5600e83611f19565b9150611bf0826122ef565b602082019050919050565b6000611c08600e83611f19565b9150611c1382612318565b602082019050919050565b6000611c2b600a83611f19565b9150611c3682612341565b602082019050919050565b6000611c4e600a83611f19565b9150611c598261236a565b602082019050919050565b611c6d81612075565b82525050565b6000602082019050611c886000830184611aa5565b92915050565b6000608082019050611ca36000830188611aa5565b611cb06020830187611aa5565b611cbd6040830186611c64565b8181036060830152611cd0818486611ac3565b90509695505050505050565b6000608082019050611cf16000830186611aa5565b611cfe6020830185611aa5565b611d0b6040830184611c64565b8181036060830152611d1c81611bb5565b9050949350505050565b6000604082019050611d3b6000830185611aa5565b611d486020830184611c64565b9392505050565b6000602082019050611d646000830184611ab4565b92915050565b60006020820190508181036000830152611d848184611af0565b905092915050565b60006020820190508181036000830152611da581611b29565b9050919050565b60006020820190508181036000830152611dc581611b4c565b9050919050565b60006020820190508181036000830152611de581611b6f565b9050919050565b60006020820190508181036000830152611e0581611b92565b9050919050565b60006020820190508181036000830152611e2581611bd8565b9050919050565b60006020820190508181036000830152611e4581611bfb565b9050919050565b60006020820190508181036000830152611e6581611c1e565b9050919050565b60006020820190508181036000830152611e8581611c41565b9050919050565b6000602082019050611ea16000830184611c64565b92915050565b6000611eb1611ec2565b9050611ebd82826120f3565b919050565b6000604051905090565b600067ffffffffffffffff821115611ee757611ee66121e2565b5b611ef082612211565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611f3582612075565b9150611f4083612075565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611f7557611f74612155565b5b828201905092915050565b6000611f8b82612075565b9150611f9683612075565b925082611fa657611fa5612184565b5b828204905092915050565b6000611fbc82612075565b9150611fc783612075565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561200057611fff612155565b5b828202905092915050565b600061201682612055565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156120ac578082015181840152602081019050612091565b838111156120bb576000848401525b50505050565b600060028204905060018216806120d957607f821691505b602082108114156120ed576120ec6121b3565b5b50919050565b6120fc82612211565b810181811067ffffffffffffffff8211171561211b5761211a6121e2565b5b80604052505050565b600061212f82612075565b915061213a83612075565b92508261214a57612149612184565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b7f4d696e7420776f756c6420657863656564206d617820737570706c79206f662060008201527f4e46547300000000000000000000000000000000000000000000000000000000602082015250565b7f5a45524f5f414444524553530000000000000000000000000000000000000000600082015250565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b50565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b7f4e4f545f4d494e54454400000000000000000000000000000000000000000000600082015250565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b61239c8161200b565b81146123a757600080fd5b50565b6123b38161201d565b81146123be57600080fd5b50565b6123ca81612029565b81146123d557600080fd5b50565b6123e181612075565b81146123ec57600080fd5b5056fea2646970667358221220c0a55333192370778c2c0e5ad175b095a2229989edeaa2cd1474aa8ea526793a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 102,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 104,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 115,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "_ownerOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 119,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "_balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 168,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "getApproved",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 174,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 717,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 728,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "tokenURIContractAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 730,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "royaltyReceiver",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 732,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "seed",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)5_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}