{
  "address": "0xaB506c84e4e3458F037fB05937074F9368D96D18",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "poemTitle",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "poemBody",
          "type": "string"
        },
        {
          "internalType": "bytes32[]",
          "name": "markleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "addPoem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxElements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "poemTitle",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "poemBody",
          "type": "string"
        },
        {
          "internalType": "bytes32[]",
          "name": "markleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "modulo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poemBodies",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poemTitles",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondarySaleRoyalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb23f6f3d8bd411494c7add06495c076ecf78bf6064fdc72fd53df711d9b2bf59",
  "receipt": {
    "to": null,
    "from": "0xe0C3136Cf7f7d8cA1a2de8eE5a278261DE1F5CA8",
    "contractAddress": "0xaB506c84e4e3458F037fB05937074F9368D96D18",
    "transactionIndex": 0,
    "gasUsed": "3612416",
    "logsBloom": "0x
    "blockHash": "0x2e8f16a8231b7d600f3c4ca00461f5f305be5642d44b56d8594b2aa82831cdd7",
    "transactionHash": "0xb23f6f3d8bd411494c7add06495c076ecf78bf6064fdc72fd53df711d9b2bf59",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 23945107,
        "transactionHash": "0xb23f6f3d8bd411494c7add06495c076ecf78bf6064fdc72fd53df711d9b2bf59",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e0c3136cf7f7d8ca1a2de8ee5a278261de1f5ca8",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000066abc9222e270000000000000000000000000000000000000000000000000009b34e1ac1c714830000000000000000000000000000000000000000000004cc606602f8fa22fecf000000000000000000000000000000000000000000000000094ca2519f98ed830000000000000000000000000000000000000000000004cc60ccaec21c5125cf",
        "logIndex": 0,
        "blockHash": "0x2e8f16a8231b7d600f3c4ca00461f5f305be5642d44b56d8594b2aa82831cdd7"
      }
    ],
    "blockNumber": 23945107,
    "cumulativeGasUsed": "3612416",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "47c9ae2848bc083ff1b9cc7629d37b6a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"poemTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poemBody\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"markleProof\",\"type\":\"bytes32[]\"}],\"name\":\"addPoem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxElements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"poemTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poemBody\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"markleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modulo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poemBodies\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poemTitles\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondarySaleRoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SakutaroPoem.sol\":\"SakutaroPoem\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1bbdc6813c021e138da527c44d2615931b0e5c7fa2f58369846ed288324a8\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\n/// @dev Note that balanceOf does not revert if passed the zero address, in defiance of the ERC.\\nabstract contract ERC721 {\\n    /*///////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            ERC721 STORAGE                        \\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(uint256 => address) public ownerOf;\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || msg.sender == getApproved[id] || isApprovedForAll[from][msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            balanceOf[from]--;\\n\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = ownerOf[id];\\n\\n        require(ownerOf[id] != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            balanceOf[owner]--;\\n        }\\n\\n        delete ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\ninterface ERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xf97378ab999188b3d5d97037fabbecbc726892c74cba6536899b852eb4756d6a\",\"license\":\"AGPL-3.0-only\"},\"contracts/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\",\"keccak256\":\"0x08da307723981c0508838c97599ed6f002acae4dd43f9fab03121309afcd6ab3\",\"license\":\"MIT\"},\"contracts/SakutaroPoem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//  _____         _            _\\n// /  ___|       | |          | |\\n// \\\\ `--.   __ _ | | __ _   _ | |_   __ _  _ __   ___\\n//  `--. \\\\ / _` || |/ /| | | || __| / _` || '__| / _ \\\\\\n// /\\\\__/ /| (_| ||   < | |_| || |_ | (_| || |   | (_) |\\n// \\\\____/  \\\\__,_||_|\\\\_\\\\ \\\\__,_| \\\\__| \\\\__,_||_|    \\\\___/\\n//\\npragma solidity ^0.8.2;\\n\\nimport {ERC721} from \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {Base64} from \\\"./Base64.sol\\\";\\n\\ncontract SakutaroPoem is ERC721 {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIdCounter;\\n\\n    bytes32 markeRoot = bytes32(0xcd6af4a55c0a60ea2164e19db484a1da7c1fdd8210559e39181f057da1d8a42e);\\n    mapping(uint256 => string) public poemTitles;\\n    mapping(uint256 => string) public poemBodies;\\n\\n    uint256 public constant maxElements = 39;\\n    uint256 public constant secondarySaleRoyalty = 10_00000; // 10.0%\\n    uint256 public constant modulo = 100_00000; // precision 100.00000%\\n\\n    address public royaltyReceiver;\\n    uint256 private seed;\\n\\n    constructor() ERC721(\\\"Sakurato Poem\\\", \\\"SAKU\\\") {\\n        royaltyReceiver = msg.sender;\\n        seed = block.timestamp;\\n    }\\n\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _tokenIdCounter.current();\\n    }\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        string calldata poemTitle,\\n        string calldata poemBody,\\n        bytes32[] memory markleProof\\n    ) public {\\n        require(_tokenIdCounter.current() < maxElements, \\\"Mint would exceed max supply of NFTs\\\");\\n        require(_tokenIdCounter.current() == id, \\\"Must add poem data for yours\\\");\\n        addPoem(id, poemTitle, poemBody, markleProof);\\n        _tokenIdCounter.increment();\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _safeMint(to, tokenId);\\n    }\\n\\n    function _burn(uint256 tokenId) internal override(ERC721) {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override(ERC721) returns (string memory) {\\n        uint256 id;\\n        if (_tokenIdCounter.current() < maxElements) {\\n            id = tokenId - 1;\\n        } else {\\n            id = (uint160(ownerOf[tokenId]) + seed) % uint256(maxElements);\\n        }\\n\\n        string[11] memory parts;\\n        parts[0] = '<svg width=\\\"400\\\" height=\\\"400\\\" viewBox=\\\"0, 0, 410, 410\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">';\\n        parts[1] = '<defs><linearGradient id=\\\"grad1\\\" x1=\\\"0%\\\" y1=\\\"50%\\\" ><stop offset=\\\"0%\\\" stop-color=\\\"#0f2350\\\" ><animate id=\\\"a1\\\" attributeName=\\\"stop-color\\\" values=\\\"#0f2350; #6a5acd\\\" begin=\\\"0; a2.end\\\" dur=\\\"3s\\\" /><animate id=\\\"a2\\\" attributeName=\\\"stop-color\\\" values=\\\"#6a5acd; #0f2350\\\" begin=\\\"a1.end\\\" dur=\\\"3s\\\" /></stop><stop offset=\\\"100%\\\" stop-color=\\\"#6a5acd\\\" ><animate id=\\\"a3\\\" attributeName=\\\"stop-color\\\" values=\\\"#6a5acd; #0f2350\\\" begin=\\\"0; a4.end\\\" dur=\\\"3s\\\" /><animate id=\\\"a4\\\" attributeName=\\\"stop-color\\\" values=\\\"#0f2350; #6a5acd\\\" begin=\\\"a3.end\\\" dur=\\\"3s\\\" /></stop></linearGradient></defs>';\\n        parts[2] = '<style type=\\\"text/css\\\">p {font-family: serif; color: white;}</style>';\\n        parts[3] = '<rect width=\\\"400\\\" height=\\\"400\\\" fill=\\\"url(#grad1)\\\" />';\\n        parts[4] = '<foreignObject x=\\\"25\\\" y=\\\"15\\\" width=\\\"350\\\" height=\\\"370\\\"><p class=\\\"shadow\\\" xmlns=\\\"http://www.w3.org/1999/xhtml\\\">';\\n        parts[5] = poemTitles[id];\\n        parts[6] = '</p><p xmlns=\\\"http://www.w3.org/1999/xhtml\\\">';\\n        parts[7] = poemBodies[id];\\n        parts[8] = '</p><p style=\\\"padding-top: 1em\\\" xmlns=\\\"http://www.w3.org/1999/xhtml\\\">';\\n        parts[9] = unicode\\\"\\u2015 \\u8429\\u539f \\u6714\\u592a\\u90ce\\\";\\n        parts[10] = \\\"</p></foreignObject></svg>\\\";\\n\\n        string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8], parts[9], parts[10]));\\n        string memory json = Base64.encode(bytes(string(abi.encodePacked(\\n          \\\"{\\\",\\n          '\\\"name\\\": \\\"', poemTitles[id], '\\\",',\\n          '\\\"description\\\": \\\"Thirty-nine poems from Sakutaro Hagiwara\\\\'s late self-selected collection \\\\\\\\\\\"Shukumei\\\\\\\\\\\" have been inscribed on Blockchain as full-onchain NFTs. The content of this NFT changes depending on the owner.\\\",',\\n          '\\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\\\",',\\n          '\\\"license\\\": \\\"CC-BY 4.0\\\",',\\n          '\\\"creator\\\": \\\"Ara\\\"',\\n          \\\"}\\\"\\n        ))));\\n        output = string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n\\n        return output;\\n    }\\n\\n    function addPoem(\\n        uint256 id,\\n        string calldata poemTitle,\\n        string calldata poemBody,\\n        bytes32[] memory markleProof\\n    ) public {\\n        bytes32 leaf = keccak256(abi.encodePacked(poemTitle, poemBody));\\n        require(MerkleProof.verify(markleProof, markeRoot, leaf), \\\"poem not match\\\");\\n        poemTitles[id] = poemTitle;\\n        poemBodies[id] = poemBody;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public pure virtual override(ERC721) returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f || // ERC165 Interface ID for ERC721Metadata\\n            interfaceId == 0x2a55205a; // ERC165 Interface ID for ERC2981\\n    }\\n\\n    // ERC-2981\\n    function royaltyInfo(\\n        uint256, /* _tokenId */\\n        uint256 _value\\n    ) external view returns (address _receiver, uint256 _royaltyAmount) {\\n        _receiver = royaltyReceiver;\\n        _royaltyAmount = (_value / modulo) * secondarySaleRoyalty;\\n    }\\n}\\n\",\"keccak256\":\"0xb4fe01d7ceb2b5c686104e1bedd6d87d2290a4a780754a5a82a999383c18fead\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040527fcd6af4a55c0a60ea2164e19db484a1da7c1fdd8210559e39181f057da1d8a42e60001b6007553480156200003857600080fd5b506040518060400160405280600d81526020017f53616b757261746f20506f656d000000000000000000000000000000000000008152506040518060400160405280600481526020017f53414b55000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bd92919062000127565b508060019080519060200190620000d692919062000127565b50505033600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600b819055506200023c565b8280546200013590620001d7565b90600052602060002090601f016020900481019282620001595760008555620001a5565b82601f106200017457805160ff1916838001178555620001a5565b82800160010185558215620001a5579182015b82811115620001a457825182559160200191906001019062000187565b5b509050620001b49190620001b8565b5090565b5b80821115620001d3576000816000905550600101620001b9565b5090565b60006002820490506001821680620001f057607f821691505b602082108114156200020757620002066200020d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b613e8f806200024c6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063558fa0f5116100c3578063a22cb4651161007c578063a22cb465146103a1578063a86faa8c146103bd578063b88d4fde146103ed578063c87b56dd14610409578063e227fddb14610439578063e985e9c5146104695761014d565b8063558fa0f5146102c95780636352211e146102e757806363f204d01461031757806370a082311461033557806395d89b41146103655780639fbc8713146103835761014d565b806323b872dd1161011557806323b872dd1461020a57806329745262146102265780632a55205a1461024457806342842e0e1461027557806344e09ced146102915780634cf34769146102ad5761014d565b806301ffc9a71461015257806306fdde0314610182578063081812fc146101a0578063095ea7b3146101d057806318160ddd146101ec575b600080fd5b61016c60048036038101906101679190612843565b610499565b604051610179919061301e565b60405180910390f35b61018a61055b565b6040516101979190613039565b60405180910390f35b6101ba60048036038101906101b59190612895565b6105e9565b6040516101c79190612f44565b60405180910390f35b6101ea60048036038101906101e5919061273f565b61061c565b005b6101f4610805565b604051610201919061315b565b60405180910390f35b610224600480360381019061021f9190612639565b610816565b005b61022e610c16565b60405161023b919061315b565b60405180910390f35b61025e60048036038101906102599190612971565b610c1d565b60405161026c929190612ff5565b60405180910390f35b61028f600480360381019061028a9190612639565b610c6b565b005b6102ab60048036038101906102a691906128be565b610db2565b005b6102c760048036038101906102c2919061277b565b610e7e565b005b6102d1610f4f565b6040516102de919061315b565b60405180910390f35b61030160048036038101906102fc9190612895565b610f54565b60405161030e9190612f44565b60405180910390f35b61031f610f87565b60405161032c919061315b565b60405180910390f35b61034f600480360381019061034a91906125d4565b610f8e565b60405161035c919061315b565b60405180910390f35b61036d610fa6565b60405161037a9190613039565b60405180910390f35b61038b611034565b6040516103989190612f44565b60405180910390f35b6103bb60048036038101906103b69190612703565b61105a565b005b6103d760048036038101906103d29190612895565b611157565b6040516103e49190613039565b60405180910390f35b61040760048036038101906104029190612688565b6111f7565b005b610423600480360381019061041e9190612895565b611341565b6040516104309190613039565b60405180910390f35b610453600480360381019061044e9190612895565b611c5d565b6040516104609190613039565b60405180910390f35b610483600480360381019061047e91906125fd565b611cfd565b604051610490919061301e565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104f457506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105245750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105545750632a55205a60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6000805461056890613425565b80601f016020809104026020016040519081016040528092919081815260200182805461059490613425565b80156105e15780601f106105b6576101008083540402835291602001916105e1565b820191906000526020600020905b8154815290600101906020018083116105c457829003601f168201915b505050505081565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806107145750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610753576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074a9061311b565b60405180910390fd5b826004600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b60006108116006611d2c565b905090565b6003600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146108b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ae9061313b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091e9061305b565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109bf57506004600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80610a505750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610a8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a869061311b565b60405180910390fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6298968081565b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150620f42406298968084610c5891906132a6565b610c6291906132d7565b90509250929050565b610c76838383610816565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480610d6e575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b8152600401610cfb93929190612fab565b602060405180830381600087803b158015610d1557600080fd5b505af1158015610d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4d919061286c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b610dad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da4906130bb565b60405180910390fd5b505050565b600085858585604051602001610dcb9493929190612dda565b604051602081830303815290604052805190602001209050610df08260075483611d3a565b610e2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e269061309b565b60405180910390fd5b8585600860008a81526020019081526020016000209190610e51929190612343565b508383600960008a81526020019081526020016000209190610e74929190612343565b5050505050505050565b6027610e8a6006611d2c565b10610eca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec19061307b565b60405180910390fd5b85610ed56006611d2c565b14610f15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0c906130db565b60405180910390fd5b610f23868686868686610db2565b610f2d6006611e16565b6000610f396006611d2c565b9050610f458882611e2c565b5050505050505050565b602781565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b620f424081565b60026020528060005260406000206000915090505481565b60018054610fb390613425565b80601f0160208091040260200160405190810160405280929190818152602001828054610fdf90613425565b801561102c5780601f106110015761010080835404028352916020019161102c565b820191906000526020600020905b81548152906001019060200180831161100f57829003601f168201915b505050505081565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161114b919061301e565b60405180910390a35050565b6008602052806000526040600020600091509050805461117690613425565b80601f01602080910402602001604051908101604052809291908181526020018280546111a290613425565b80156111ef5780601f106111c4576101008083540402835291602001916111ef565b820191906000526020600020905b8154815290600101906020018083116111d257829003601f168201915b505050505081565b611202848484610816565b60008373ffffffffffffffffffffffffffffffffffffffff163b14806112fc575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168373ffffffffffffffffffffffffffffffffffffffff1663150b7a02338786866040518563ffffffff1660e01b81526004016112899493929190612f5f565b602060405180830381600087803b1580156112a357600080fd5b505af11580156112b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112db919061286c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b61133b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611332906130bb565b60405180910390fd5b50505050565b6060600060276113516006611d2c565b101561136b576001836113649190613331565b90506113d1565b6027600b546003600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113c49190613250565b6113ce91906134db565b90505b6113d96123c9565b6040518060800160405280605a8152602001613d77605a9139816000600b811061142c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201819052506040518061026001604052806102318152602001613b066102319139816001600b811061148a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020181905250604051806080016040528060448152602001613e1660449139816002600b81106114e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020181905250604051806060016040528060348152602001613aa660349139816003600b8110611540577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201819052506040518060a00160405280606d8152602001613a39606d9139816004600b811061159b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201819052506008600083815260200190815260200160002080546115c190613425565b80601f01602080910402602001604051908101604052809291908181526020018280546115ed90613425565b801561163a5780601f1061160f5761010080835404028352916020019161163a565b820191906000526020600020905b81548152906001019060200180831161161d57829003601f168201915b5050505050816005600b8110611679577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201819052506040518060600160405280602c8152602001613ada602c9139816006600b81106116d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201819052506009600083815260200190815260200160002080546116fa90613425565b80601f016020809104026020016040519081016040528092919081815260200182805461172690613425565b80156117735780601f1061174857610100808354040283529160200191611773565b820191906000526020600020905b81548152906001019060200180831161175657829003601f168201915b5050505050816007600b81106117b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020181905250604051806080016040528060458152602001613dd160459139816008600b811061180d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201819052506040518060400160405280601481526020017fe2809520e890a9e58e9f20e69c94e5a4aae9838e000000000000000000000000815250816009600b8110611885577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201819052506040518060400160405280601a81526020017f3c2f703e3c2f666f726569676e4f626a6563743e3c2f7376673e00000000000081525081600a600b81106118fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201819052506000816000600b8110611941577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151826001600b8110611980577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151836002600b81106119bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151846003600b81106119fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151856004600b8110611a3d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151866005600b8110611a7c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151876006600b8110611abb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151886007600b8110611afa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151896008600b8110611b39577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518a6009600b8110611b78577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518b600a600b8110611bb7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151604051602001611bd69b9a99989796959493929190612e02565b60405160208183030381529060405290506000611c2d60086000868152602001908152602001600020611c0884611f72565b604051602001611c19929190612e9b565b604051602081830303815290604052611f72565b905080604051602001611c409190612f22565b604051602081830303815290604052915081945050505050919050565b60096020528060005260406000206000915090508054611c7c90613425565b80601f0160208091040260200160405190810160405280929190818152602001828054611ca890613425565b8015611cf55780601f10611cca57610100808354040283529160200191611cf5565b820191906000526020600020905b815481529060010190602001808311611cd857829003601f168201915b505050505081565b60056020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600081600001549050919050565b60008082905060005b8551811015611e08576000868281518110611d87577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050808311611dc8578281604051602001611dab929190612dae565b604051602081830303815290604052805190602001209250611df4565b8083604051602001611ddb929190612dae565b6040516020818303038152906040528051906020012092505b508080611e0090613488565b915050611d43565b508381149150509392505050565b6001816000016000828254019250508190555050565b611e368282612130565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480611f2f575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a02336000856040518463ffffffff1660e01b8152600401611ebc93929190612fab565b602060405180830381600087803b158015611ed657600080fd5b505af1158015611eea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0e919061286c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611f6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f65906130bb565b60405180910390fd5b5050565b60606000825190506000811415611f9b576040518060200160405280600081525091505061212b565b60006003600283611fac9190613250565b611fb691906132a6565b6004611fc291906132d7565b90506000602082611fd39190613250565b67ffffffffffffffff811115612012577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156120445781602001600182028036833780820191505090505b5090506000604051806060016040528060408152602001613d37604091399050600181016020830160005b868110156120e85760038101905062ffffff818a015116603f8160121c168401518060081b905060ff603f83600c1c1686015116810190508060081b905060ff603f8360061c1686015116810190508060081b905060ff603f831686015116810190508060e01b9050808452600484019350505061206f565b50600386066001811461210257600281146121125761211d565b613d3d60f01b600283035261211d565b603d60f81b60018303525b508484525050819450505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156121a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121979061305b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612242576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612239906130fb565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b82805461234f90613425565b90600052602060002090601f01602090048101928261237157600085556123b8565b82601f1061238a57803560ff19168380011785556123b8565b828001600101855582156123b8579182015b828111156123b757823582559160200191906001019061239c565b5b5090506123c591906123f1565b5090565b604051806101600160405280600b905b60608152602001906001900390816123d95790505090565b5b8082111561240a5760008160009055506001016123f2565b5090565b600061242161241c8461319b565b613176565b9050808382526020820190508285602086028201111561244057600080fd5b60005b858110156124705781612456888261250c565b845260208401935060208301925050600181019050612443565b5050509392505050565b600061248d612488846131c7565b613176565b9050828152602081018484840111156124a557600080fd5b6124b08482856133e3565b509392505050565b6000813590506124c7816139c5565b92915050565b600082601f8301126124de57600080fd5b81356124ee84826020860161240e565b91505092915050565b600081359050612506816139dc565b92915050565b60008135905061251b816139f3565b92915050565b60008135905061253081613a0a565b92915050565b60008151905061254581613a0a565b92915050565b600082601f83011261255c57600080fd5b813561256c84826020860161247a565b91505092915050565b60008083601f84011261258757600080fd5b8235905067ffffffffffffffff8111156125a057600080fd5b6020830191508360018202830111156125b857600080fd5b9250929050565b6000813590506125ce81613a21565b92915050565b6000602082840312156125e657600080fd5b60006125f4848285016124b8565b91505092915050565b6000806040838503121561261057600080fd5b600061261e858286016124b8565b925050602061262f858286016124b8565b9150509250929050565b60008060006060848603121561264e57600080fd5b600061265c868287016124b8565b935050602061266d868287016124b8565b925050604061267e868287016125bf565b9150509250925092565b6000806000806080858703121561269e57600080fd5b60006126ac878288016124b8565b94505060206126bd878288016124b8565b93505060406126ce878288016125bf565b925050606085013567ffffffffffffffff8111156126eb57600080fd5b6126f78782880161254b565b91505092959194509250565b6000806040838503121561271657600080fd5b6000612724858286016124b8565b9250506020612735858286016124f7565b9150509250929050565b6000806040838503121561275257600080fd5b6000612760858286016124b8565b9250506020612771858286016125bf565b9150509250929050565b600080600080600080600060a0888a03121561279657600080fd5b60006127a48a828b016124b8565b97505060206127b58a828b016125bf565b965050604088013567ffffffffffffffff8111156127d257600080fd5b6127de8a828b01612575565b9550955050606088013567ffffffffffffffff8111156127fd57600080fd5b6128098a828b01612575565b9350935050608088013567ffffffffffffffff81111561282857600080fd5b6128348a828b016124cd565b91505092959891949750929550565b60006020828403121561285557600080fd5b600061286384828501612521565b91505092915050565b60006020828403121561287e57600080fd5b600061288c84828501612536565b91505092915050565b6000602082840312156128a757600080fd5b60006128b5848285016125bf565b91505092915050565b600080600080600080608087890312156128d757600080fd5b60006128e589828a016125bf565b965050602087013567ffffffffffffffff81111561290257600080fd5b61290e89828a01612575565b9550955050604087013567ffffffffffffffff81111561292d57600080fd5b61293989828a01612575565b9350935050606087013567ffffffffffffffff81111561295857600080fd5b61296489828a016124cd565b9150509295509295509295565b6000806040838503121561298457600080fd5b6000612992858286016125bf565b92505060206129a3858286016125bf565b9150509250929050565b6129b681613365565b82525050565b6129c581613377565b82525050565b6129dc6129d782613383565b6134d1565b82525050565b60006129ed8261320d565b6129f78185613223565b9350612a078185602086016133f2565b612a10816135c8565b840191505092915050565b6000612a278385613245565b9350612a348385846133e3565b82840190509392505050565b6000612a4b82613218565b612a558185613234565b9350612a658185602086016133f2565b612a6e816135c8565b840191505092915050565b6000612a8482613218565b612a8e8185613245565b9350612a9e8185602086016133f2565b80840191505092915050565b60008154612ab781613425565b612ac18186613245565b94506001821660008114612adc5760018114612aed57612b20565b60ff19831686528186019350612b20565b612af6856131f8565b60005b83811015612b1857815481890152600182019150602081019050612af9565b838801955050505b50505092915050565b6000612b36600283613245565b9150612b41826135d9565b600282019050919050565b6000612b59601083613245565b9150612b6482613602565b601082019050919050565b6000612b7c60d783613245565b9150612b878261362b565b60d782019050919050565b6000612b9f601183613234565b9150612baa82613738565b602082019050919050565b6000612bc2602483613234565b9150612bcd82613761565b604082019050919050565b6000612be5600e83613234565b9150612bf0826137b0565b602082019050919050565b6000612c08602483613245565b9150612c13826137d9565b602482019050919050565b6000612c2b600183613245565b9150612c3682613828565b600182019050919050565b6000612c4e601083613234565b9150612c5982613851565b602082019050919050565b6000612c71600983613245565b9150612c7c8261387a565b600982019050919050565b6000612c94601c83613234565b9150612c9f826138a3565b602082019050919050565b6000612cb7600183613245565b9150612cc2826138cc565b600182019050919050565b6000612cda601d83613245565b9150612ce5826138f5565b601d82019050919050565b6000612cfd600083613223565b9150612d088261391e565b600082019050919050565b6000612d20600e83613234565b9150612d2b82613921565b602082019050919050565b6000612d43600e83613234565b9150612d4e8261394a565b602082019050919050565b6000612d66601783613245565b9150612d7182613973565b601782019050919050565b6000612d89600a83613234565b9150612d948261399c565b602082019050919050565b612da8816133d9565b82525050565b6000612dba82856129cb565b602082019150612dca82846129cb565b6020820191508190509392505050565b6000612de7828688612a1b565b9150612df4828486612a1b565b915081905095945050505050565b6000612e0e828e612a79565b9150612e1a828d612a79565b9150612e26828c612a79565b9150612e32828b612a79565b9150612e3e828a612a79565b9150612e4a8289612a79565b9150612e568288612a79565b9150612e628287612a79565b9150612e6e8286612a79565b9150612e7a8285612a79565b9150612e868284612a79565b91508190509c9b505050505050505050505050565b6000612ea682612caa565b9150612eb182612c64565b9150612ebd8285612aaa565b9150612ec882612b29565b9150612ed382612b6f565b9150612ede82612bfb565b9150612eea8284612a79565b9150612ef582612b29565b9150612f0082612d59565b9150612f0b82612b4c565b9150612f1682612c1e565b91508190509392505050565b6000612f2d82612ccd565b9150612f398284612a79565b915081905092915050565b6000602082019050612f5960008301846129ad565b92915050565b6000608082019050612f7460008301876129ad565b612f8160208301866129ad565b612f8e6040830185612d9f565b8181036060830152612fa081846129e2565b905095945050505050565b6000608082019050612fc060008301866129ad565b612fcd60208301856129ad565b612fda6040830184612d9f565b8181036060830152612feb81612cf0565b9050949350505050565b600060408201905061300a60008301856129ad565b6130176020830184612d9f565b9392505050565b600060208201905061303360008301846129bc565b92915050565b600060208201905081810360008301526130538184612a40565b905092915050565b6000602082019050818103600083015261307481612b92565b9050919050565b6000602082019050818103600083015261309481612bb5565b9050919050565b600060208201905081810360008301526130b481612bd8565b9050919050565b600060208201905081810360008301526130d481612c41565b9050919050565b600060208201905081810360008301526130f481612c87565b9050919050565b6000602082019050818103600083015261311481612d13565b9050919050565b6000602082019050818103600083015261313481612d36565b9050919050565b6000602082019050818103600083015261315481612d7c565b9050919050565b60006020820190506131706000830184612d9f565b92915050565b6000613180613191565b905061318c8282613457565b919050565b6000604051905090565b600067ffffffffffffffff8211156131b6576131b5613599565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156131e2576131e1613599565b5b6131eb826135c8565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061325b826133d9565b9150613266836133d9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561329b5761329a61350c565b5b828201905092915050565b60006132b1826133d9565b91506132bc836133d9565b9250826132cc576132cb61353b565b5b828204905092915050565b60006132e2826133d9565b91506132ed836133d9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156133265761332561350c565b5b828202905092915050565b600061333c826133d9565b9150613347836133d9565b92508282101561335a5761335961350c565b5b828203905092915050565b6000613370826133b9565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156134105780820151818401526020810190506133f5565b8381111561341f576000848401525b50505050565b6000600282049050600182168061343d57607f821691505b602082108114156134515761345061356a565b5b50919050565b613460826135c8565b810181811067ffffffffffffffff8211171561347f5761347e613599565b5b80604052505050565b6000613493826133d9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156134c6576134c561350c565b5b600182019050919050565b6000819050919050565b60006134e6826133d9565b91506134f1836133d9565b9250826135015761350061353b565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f222c000000000000000000000000000000000000000000000000000000000000600082015250565b7f2263726561746f72223a20224172612200000000000000000000000000000000600082015250565b7f226465736372697074696f6e223a20225468697274792d6e696e6520706f656d60008201527f732066726f6d2053616b757461726f2048616769776172612773206c6174652060208201527f73656c662d73656c656374656420636f6c6c656374696f6e205c225368756b7560408201527f6d65695c222068617665206265656e20696e73637269626564206f6e20426c6f60608201527f636b636861696e2061732066756c6c2d6f6e636861696e204e4654732e20546860808201527f6520636f6e74656e74206f662074686973204e4654206368616e67657320646560a08201527f70656e64696e67206f6e20746865206f776e65722e222c00000000000000000060c082015250565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b7f4d696e7420776f756c6420657863656564206d617820737570706c79206f662060008201527f4e46547300000000000000000000000000000000000000000000000000000000602082015250565b7f706f656d206e6f74206d61746368000000000000000000000000000000000000600082015250565b7f22696d616765223a2022646174613a696d6167652f7376672b786d6c3b62617360008201527f6536342c00000000000000000000000000000000000000000000000000000000602082015250565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b7f226e616d65223a20220000000000000000000000000000000000000000000000600082015250565b7f4d7573742061646420706f656d206461746120666f7220796f75727300000000600082015250565b7f7b00000000000000000000000000000000000000000000000000000000000000600082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b50565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b7f226c6963656e7365223a202243432d425920342e30222c000000000000000000600082015250565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b6139ce81613365565b81146139d957600080fd5b50565b6139e581613377565b81146139f057600080fd5b50565b6139fc81613383565b8114613a0757600080fd5b50565b613a138161338d565b8114613a1e57600080fd5b50565b613a2a816133d9565b8114613a3557600080fd5b5056fe3c666f726569676e4f626a65637420783d2232352220793d223135222077696474683d2233353022206865696768743d22333730223e3c7020636c6173733d22736861646f772220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e3c726563742077696474683d2234303022206865696768743d22343030222066696c6c3d2275726c282367726164312922202f3e3c2f703e3c7020786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e3c646566733e3c6c696e6561724772616469656e742069643d226772616431222078313d223025222079313d2235302522203e3c73746f70206f66667365743d223025222073746f702d636f6c6f723d222330663233353022203e3c616e696d6174652069643d22613122206174747269627574654e616d653d2273746f702d636f6c6f72222076616c7565733d22233066323335303b20233661356163642220626567696e3d22303b2061322e656e6422206475723d22337322202f3e3c616e696d6174652069643d22613222206174747269627574654e616d653d2273746f702d636f6c6f72222076616c7565733d22233661356163643b20233066323335302220626567696e3d2261312e656e6422206475723d22337322202f3e3c2f73746f703e3c73746f70206f66667365743d2231303025222073746f702d636f6c6f723d222336613561636422203e3c616e696d6174652069643d22613322206174747269627574654e616d653d2273746f702d636f6c6f72222076616c7565733d22233661356163643b20233066323335302220626567696e3d22303b2061342e656e6422206475723d22337322202f3e3c616e696d6174652069643d22613422206174747269627574654e616d653d2273746f702d636f6c6f72222076616c7565733d22233066323335303b20233661356163642220626567696e3d2261332e656e6422206475723d22337322202f3e3c2f73746f703e3c2f6c696e6561724772616469656e743e3c2f646566733e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f3c7376672077696474683d2234303022206865696768743d22343030222076696577426f783d22302c20302c203431302c203431302220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e3c2f703e3c70207374796c653d2270616464696e672d746f703a2031656d2220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e3c7374796c6520747970653d22746578742f637373223e70207b666f6e742d66616d696c793a2073657269663b20636f6c6f723a2077686974653b7d3c2f7374796c653ea2646970667358221220e7b0121d52d2592edac7996d8e03fa284efc42fba391fb5f5e8d5cccbe3a1bef64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 173,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 175,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 186,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "balanceOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 190,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "ownerOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 194,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "getApproved",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 200,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 735,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 741,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "markeRoot",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes32"
      },
      {
        "astId": 745,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "poemTitles",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 749,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "poemBodies",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 760,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "royaltyReceiver",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 762,
        "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
        "label": "seed",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)5_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/SakutaroPoem.sol:SakutaroPoem",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}